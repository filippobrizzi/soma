// Type, Name, Default Value, Description
//DECLARE(material,Material,wool,"")
    DECLARE(std::string,title,"untitled","Name of the test","")
    DECLARE(std::string,comment,"","Provide comment","")
    DECLARE(std::string,category,"","Provide comment","")

    DECLARE(int,timestamp,0,"Timestamp","")

    DECLARE(Scalar,friction,0,"Haptic/Force:By default NO friction. Use -1 for use from material","")
    DECLARE(bool,frictionLockPoint,false,"Haptic/Force:","")
    DECLARE(Scalar,frictionMinimumVelocity,1e-4,"Haptic/Force:","m/s")

    DECLARE(Scalar,catenariaAFactor,1,"Test","")
    DECLARE(bool,voronoiMass,true,"Geometry:Voronoi Mass vs Nodal Mass","")

    DECLARE(bool,symmetricBuildA,true,"Sym A","")
    DECLARE(Scalar,damping,0.5,"Simulation:","")
    DECLARE(Scalar,pcgTolerance,0.0,"Simulation:Tolerance as percentage of effective d0","")
    DECLARE(Scalar,pcgTolerancebyh,0.01,"Simulation:Tolerance as percentage of effective d0","")
    DECLARE(Scalar,lastTolerance,0.0,"Simulation:Tolerance as percentage of effective d0","")
    DECLARE(Scalar,pcgDeltaMin,0.0,"Simulation:Tolerance in the delta increment","")
    DECLARE(int,pcgMaxIterations,200,"Simulation:Maximum number of iterations of Conjugate Gradient (<0 means no PCG at all)","count")
    DECLARE(int,pcgMinIterations,0,"Simulation:Minimum number of iterations of Conjugate Gradient (<0 means no PCG at all)","count")
    DECLARE(Scalar,maxTimeStep,1E10,"Simulation:","s")
    DECLARE(Scalar,minTimeStep,0,"Simulation:","s")
    DECLARE(bool,multiStep,0,"inTimeStep:","s")
    DECLARE(Scalar,updateTimeStep,0.005,"Update Time Step:","s")

    DECLARE(bool,cocloth,false,"Collision:use cocloth","")
    DECLARE(Scalar,coclothStiffness,0.05,"Collision:cocloth stiffness","")
    DECLARE(Scalar,coclothDistance,0.01,"Collision:cocloth minimum distance","")

    DECLARE(bool,pcgAscherInit,false,"PCG:DO NOT USE","")
    DECLARE(bool,pcgAscherPre,false,"PCG:Modified Conditioner","")
    DECLARE(bool,pcgAscherThreshold,false,"PCG:","")

    DECLAREX(int,W,gridW,20,"Geometry:Number of tiles along X. If zero uses dx to compute","extent")
    DECLAREX(int,H,gridH,20,"Geometry:Number of tiles along Y. If zero uses dy to compute","extent")
    DECLARE(Scalar,width,0.2,"Geometry:Width of cloth (m)","m")
    DECLARE(Scalar,height,0.2,"Geometry:Height of cloth (m)","m")
    DECLARE(Scalar,dx,0.0,"Geometry:Width of tiles (m)","m")
    DECLARE(Scalar,dy,0.0,"Geometry:Height of tiles (m)","m")

    DECLARE(bool,asyncSimulation,true,"Execute Simulation in a separate thread","")
    DECLARE(bool,profiled,false,"Execution:","")
    DECLARE(bool,optTriangleRot,false,"GPU:","")

    DECLARE(int,gpuTestPhase,StepPhases::End,"GPU/Test:GPU TestPhase","StepPhases::Enum")
    DECLARE(int,gpuTestMode,0,"GPU/Test:GPU TestMode: 0=none 1=one GPU 2=one CPU","enum")
    DECLARE(bool,gpuCollision,true,"GPU:GPU Collision","")

    DECLARE(bool,gpuMode,false,"GPU:","")
    DECLARE(int,gpuGlobalScale,1,"GPU:","")
    DECLARE(int,gpuLocalSize,128,"GPU:","")
    DECLARE(int,gpuGlobalLoops,4,"GPU:","")
    DECLARE(int,gpuGlobalSizeInner,128*128,"GPU:","")
    DECLARE(int,gpuLocalSizeInner,128,"GPU:","")
    // TODO: makeit a string matching vendor name
    DECLARE(std::string,openclPlatform,"","GPU:Number 1-n for selecting the platform or use name of platform name prefix like NVidia, Intel, ATI. Empty is first","enum")
    DECLARE(int,parallelLevel,1,"Execution:Parallel Level. 0=None 1=Par 2=InPar 3=ParTasks","enum")
    DECLARE(bool,parallelLevel2PCG,0,"Execution:Use PCG par for Parallel Level 2","")
    DECLARE(bool,pcgPrecond,1,"PCG: Preconditioner Selection. 0=none 1=diag 2=block","")
    DECLARE(bool,stepMode,false,"Execution:","")
    //DECLARE(bool,sparseknewinit,true,"Also 'k' key")

    DECLARE(bool,wireframe,false,"Visual:","")
    DECLARE(bool,nographics,false,"Visual:No graphic update (also 'g' key)","")
    DECLARE(int,graphicRate,30,"Visual:Graphic Framerate","fps")
    DECLARE(int,frameSkip,0,"Visual:Use this for skipping Graphics by framecount","count")
    DECLARE(int,showVariable,0,"Visual: 0 none, 1 mass, 2 deltav, 3 velocity, 4 force residual, 5 f0, ","enum")

    DECLARE(bool,compensateTimeStep,false,"Execution:Compensate Timestep","")

    DECLARE(bool,collisionbasedTimeStep,false,"Collision:","")
    DECLARE(bool,collisionbasedTimeStepSteps,3,"Collision:Maximum number of Substeps, of which last is full","count")
    DECLARE(bool,collisionbasedTimeStepMin,0.01,"Collision:Minimum step when in contact","s")
    DECLARE(int,collisionMode,1,"Collision:CollisionMode: 0=None(disables collisionbasedTimeStep) 1=Sphere 2=Triangle","enum")

    DECLARE(Scalar,stopTime,0,"Execution:Stop of simulation for testing configurations","s")
    DECLARE(bool,headless,false,"Execution:Offline mode for testing","")

    DECLARE(int,vertexOrder,1,"Geometry:Vertex Structure: 1 classic, -1 Morton (if power of two), 2 is partition of W and H by 2 or 4 for by 4","enum")
    DECLARE(bool,gridLayout,false,"Geometry:Layouts the triangles as grid and not as diagonals","")
    DECLARE(bool,gridXZ,false,"Geometry:Constructs the grid along XZ or XY (default)","")
    DECLARE(bool,gridCentered,false,"Geometry:Centers the Cloth along its XY or XZ axis. Otherwise it grows from 0,0","")
    DECLARE(bool,gridCloseLoop,false,"Geometry:Close the geometry for cylindrical","")
    DECLARE(Vector3,gridOffset,Vector3(0,0,0),"Geometry:Applies a translation to the Cloth in addition to the one of gridCentered","m")
    DECLARE(bool,logging,false,"Logging:","")
    DECLARE(TestMode::Enum,testMode,TestMode::NoTest,"Testing:","enum")
    DECLARE(Scalar,gravity,-9.81,"Environment:","m/s/s")
    DECLARE(int,gravityAxis,1,"Environment: gravity axis 0,1,2","")

    DECLARE(Scalar,defGravity,-9.81,"Environment:","m/s/s")

    DECLARE(int,sphereCount,1,"Fingers:Number of spheres","count")

    DECLARE(Vector3,sphereStartPosition,Vector3(1E10,1E0,1E0),"Fingers/Finger1:Sphere Starting Position 1E10 is default","m")
    DECLARE(Vector3,sphereStartOffset,Vector3(0,0,0),"Fingers/Finger1:Sphere Offset to Position for using default offsetted","m")
    DECLARE(Scalar,sphereRadius,0.02,"Fingers/Finger1:Sphere Radius (m)","m")
    DECLARE(Vector3,sphereVelocity,Vector3(0,0,-0.02),"Fingers/Finger1:Sphere velocity for sphere automate, moving using ","m/s")
    DECLARE(Scalar,sphereStopTime,2.0,"Fingers/Finger1:Sphere Stop Time","s")
    DECLARE(Vector3,sphereGravity,Vector3(0,0,0),"Fingers/Finger1:Sphere gravity vector","")
    DECLARE(Scalar,sphereMass,0,"Fingers/Finger1:Sphere mass","")
    DECLARE(bool,sphereMove,false,"Fingers/Finger1:Sphere moving","")
    DECLARE(bool,sphereMoveRealTime,false,"Fingers/Finger1:Sphere moving using realtime vs simtime","")

    DECLARE(std::string,material,"wool","Material:","")
    DECLARE(Scalar,matdensity,0,"Material:","")
    DECLARE(Scalar,matweftstretch,0,"Material:","")
    DECLARE(Scalar,matwarpstretch,0,"Material:","")
    DECLARE(Scalar,matshear,0,"Material:","")
    DECLARE(Scalar,mattranverse,0,"Material:","")
    DECLARE(Scalar,matweftbend,0,"Material:","")
    DECLARE(Scalar,matwarpbend,0,"Material:","")
    DECLARE(Scalar,matthickness,0,"Material:","")

    DECLARE(Vector3,cameraRotation, Vector3(0,0,0),"Visualization:","")

    DECLARE(Vector3,sphere2StartPosition,Vector3(1E10,1E0,1E0),"Fingers/Finger2:Sphere 2 Starting Position 1E10 is default","m")
    DECLARE(Vector3,sphere2StartOffset,Vector3(0,0,0),"Fingers/Finger2:Sphere Offset to Position for using default offsetted","m")
    DECLARE(Scalar,sphere2Radius,0.02,"Fingers/Finger2:Sphere 2 Radius (m)","m")
    DECLARE(Vector3,sphere2Velocity,Vector3(0,0,-0.02),"Fingers/Finger2:Sphere2 velocity for sphere automate, moving using ","m/s")
    DECLARE(Scalar,sphere2StopTime,2.0,"Fingers/Finger2:Sphere2 Stop Time","s")
    DECLARE(bool,sphere2Move,false,"Fingers/Finger2:Sphere2 moving","")
    DECLARE(bool,sphere2MoveRealTime,false,"Fingers/Finger2:Sphere2 moving using realtime vs simtime","")
    DECLARE(Vector3,sphere2Gravity,Vector3(0,0,0),"Fingers/Finger2:Sphere gravity vector","")
    DECLARE(Scalar,sphere2Mass,0,"Fingers/Finger2:Sphere mass","")
    DECLARE(Vector3,sphereRotRPY,Vector3(0,180,0),"Fingers/Finger1:","")
    DECLARE(Vector3,sphere2RotRPY,Vector3(0,0,0),"Fingers/Finger2:","")

    DECLARE(Scalar,sphereWindowContactMin,2,"SphereWindow:","")
    DECLARE(Scalar,sphereWindowContactScale,100,"SphereWindow:","")

    DECLARE(Scalar,forceScaleGfx,0.001,"Visual:Scales Forces Visually","")
    DECLARE(Scalar,textureScale,1.0,"Visual:","")
    DECLARE(std::string,textureName,"","Visual:","")

    DECLARE(bool,haptic,false,"Haptic:Enables haptic interaction","")
    DECLARE(int,hapticinport,26000,"Haptic/Network:Input port receiving position","ipport")
    DECLARE(int,hapticoutport,26001,"Haptic/Network:Output port sending force","ipport")
    DECLARE(std::string,hapticip,"","Haptic/Network: Target ip port","ip")
    DECLARE(std::string,hapticipin,"","Haptic/Network:Receiver ip port. Not used just for checking ip in devices","ip")

    DECLARE(bool,hapticforceenable,true,"Haptic/Force:","")
    DECLARE(Scalar,hapticforcelimit,10,"Haptic/Force:","")
    DECLARE(Scalar,hapticfromdisp,0.0,"Haptic/Force:Uses Y based force rendering","")
    DECLARE(int,hapticprotocol,0,"Haptic Protocol: 1 is GRAB, 2 is Hand Exos","")

    DECLARE(bool,hapticdouble,true,"Haptic/Network:Use Doubles instead of Floats in packets","")
    DECLARE(Eigen::Vector3i,hapticposindex,Eigen::Vector3i(0,1,2),"Haptic/Object1:Indices of position in packet ","indices")
    DECLARE(int,hapticrectimeindex,0,"Haptic Index of time, -1 means last element","indices")
    DECLARE(int,hapticsendtimeindex,-1,"Haptic Index of time","indices")
    DECLARE(Vector3,hapticposflip,Vector3(1,1,1),"Haptic/Object1:Coordinate specific flip","")
    DECLARE(Vector3,hapticoff,Vector3(1E10,1E10,1E10),"Haptic/Object1:Offset after scaling","m")
    DECLARE(Scalar,hapticposscale,1.0,"Haptic/Object1:Position scaling, before offset","")
    DECLARE(Eigen::Vector3i,hapticforceindex,Eigen::Vector3i(0,1,2),"Haptic/Object1:Indices of force in packet","indices")
    DECLARE(Vector3,hapticforceflip,Vector3(1,1,1),"Haptic/Object1:Coordinate specific flip for forces","")
    DECLARE(bool,haptic2,false,"Haptic/Object2:Enables haptic2 interaction","")

    DECLARE(Eigen::Vector3i,haptic2posindex,Eigen::Vector3i(3,4,5),"Haptic/Object2:Indices of position in packet ","indices")
    DECLARE(Vector3,haptic2posflip,Vector3(1,1,1),"Haptic/Object2:Coordinate specific flip","")
    DECLARE(Vector3,haptic2off,Vector3(1E10,1E10,1E10),"Haptic/Object2:Offset after scaling","m")
    DECLARE(Scalar,haptic2posscale,1.0,"Haptic/Object2:Position scaling, before offset","")
    DECLARE(Eigen::Vector3i,haptic2forceindex,Eigen::Vector3i(3,4,5),"Haptic/Object2:Indices of force in packet","indices")
    DECLARE(Vector3,haptic2forceflip,Vector3(1,1,1),"Haptic/Object2:Coordinate specific flip for forces","")

    DECLARE(Scalar,forceScale,1.0,"Haptic/Force:Force scaling as in Simulation","")


    DECLARE(bool,forceInterp,true,"Haptic/Force:Use force interpolation in Haptic Loop","")

    DECLARE(bool,tracing,false,"Logging:","")

    DECLARE(Scalar,bounceFactor,0.5,"Collision:","")

    DECLARE(bool,traceUdp,false,"Logging:Enable UDP sending of data, one per simulation step","")
    DECLARE(std::string,traceUdpIp,"127.0.0.1","Logging:IP port","ip")
    DECLARE(int,traceUdpPort,26002,"Logging:UDP port of UDP data sending","ipport")
    DECLARE(int,sideConstraints,1,"Geometry:Clockwise from top","")

    DECLARE(Vector3,backColor,Vector3(1.0,1.0,1.0),"Visual:Background Color","color")

// Other Parameters not accessible
    DECLARENO(int,vectorSize,3,"Memory:Size of Vector","")
    DECLARENO(bool,allocateOnly,true,"Memory:Only Allocation","")
    DECLARENO(bool,doublePrecision,false,"Memory:Double Precision Build","")
    DECLARENO(std::string,cpuId,"","Context/CPU:CPU Identifier","")
    DECLARENO(int,cpuCount,"","Context/CPU:CPU Count","")
    DECLARENO(std::string,os,"","Context:OS","")
    DECLARENO(bool,os64,false,"Context:64-bit OS","")
    DECLARENO(bool,build64,false,"Context/Build:64-bit Build","")
    DECLARE(int,cpuAffinity,-1,"CPU:Affinity Mask","")
    DECLARENO(int,gpuCores,0,"Context/GPU:gpuCores","")
    DECLARENO(int,gpuMaxItems,0,"Context/GPU:gpuMaxItems","")
    DECLARENO(int,gpuMaxGroupItems,0,"Context/GPU:gpuMaxGroupItems","")
    DECLARENO(int,gpuPreferredVector,0,"Context/GPU:gpuPreferredVector","")
    DECLARENO(int,gpuShareGL,0,"Context/GPU:gpuShareGL","")
    DECLARENO(int,cpuVectorSize,0,"Context/Build:cpuVectorSize","")
    DECLARE(int,gpuVectorSize,3,"GPU:gpuVectorSize","")

    DECLARE(bool,externalForce,false,"Test:externalForce","")
    DECLARE(Scalar,externalForceIntensity,0,"Test:externalForceIntensity","")
    DECLARE(Vector3,externalForceDirection,Vector3(0,0,1),"Test:externalForceDirection","")

    DECLARE(int,logpcgsteps,4096,"Logging:numberof logged pcg steps","")
    DECLARE(int,oscport,5780,"External:OSC interface port. 0 to disable","")

    DECLARE(Vector3,touchPhi,Vector3(-0.848/2,0.848/2,5),"Tactile:","")
    DECLARE(Vector3,touchTheta,Vector3(-1.115/2.0,1.119/2.0,6),"Tactile:","")
    DECLARE(Scalar,touchFactor,0.01,"Tactile:","")
    DECLARE(Scalar,touchDistance,0.01,"Tactile:","")
    DECLARE(Scalar,touchSphereSize,0.002,"Tactile:","")
    DECLARE(Scalar,touchColorLevel,0.2,"Tactile:","")
    DECLARE(bool,sphereTouch,true,"Tactile/Object1:","")
    DECLARE(bool,sphere2Touch,false,"Tactile/Object2:","")
    DECLARE(bool,forceShow,true,"Visual:","")


    DECLARE(Scalar,textileThickness,0.005,"Haptic/Force:","")
    DECLARE(Scalar,textileContactThickness,0.00,"Haptic/Force:","")
    DECLARE(Scalar,textileStiffness,30.0,"Haptic/Force:","")
    DECLARE(Scalar,fingerThickness,0.005,"Haptic/Force:","")
    DECLARE(Scalar,fingerStiffness,100.0,"Haptic/Force:","")
    DECLARE(Scalar,fingerFriction,0.5,"Haptic/Force:","")
    DECLARE(Vector3,forceImpose,Vector3(0,0,0),"Haptic/Force:Use force interpolation in Haptic Loop","")

    DECLARE(Scalar,hapticDamping,0.05,"Haptic/Force:","")

    DECLARE(bool,stereo,false,"Graphics/Stereo:","")
    DECLARE(Scalar,eyesep,0.03,"Graphics/Separation:","")
    DECLARE(Scalar,eyefocus,1.5,"Graphics/Focus:","")
    DECLARE(Scalar,phyScreenWidth,2.00,"Graphics/Physical Screen Width:","")
    DECLARE(Scalar,phyScreenRatio,1.333,"Graphics/Physical Screen Ratio","")
    DECLARE(bool,eyesflipped,false,"Graphics/Eyes Flipped","")
    DECLARE(Scalar,zoom,0.5,"Graphics/Zoom","")

    DECLARE(bool,alphamode,false,"Experimental Alpha Mode","")
    DECLARE(int,handmode,0,"Hand Mode (0=none,1=hand,2=arm)","")
    DECLARE(Scalar,handscale,0.01,"Hand Scale (cm to m is 0.01)","")
